pub const RCON: [u8; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];

pub const S_BOX: [[u8; 16]; 16] = [
    [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,
        0x76,
    ],
    [
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,
        0xc0,
    ],
    [
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31,
        0x15,
    ],
    [
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2,
        0x75,
    ],
    [
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f,
        0x84,
    ],
    [
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
        0xcf,
    ],
    [
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f,
        0xa8,
    ],
    [
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3,
        0xd2,
    ],
    [
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73,
    ],
    [
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b,
        0xdb,
    ],
    [
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,
        0x79,
    ],
    [
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae,
        0x08,
    ],
    [
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b,
        0x8a,
    ],
    [
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d,
        0x9e,
    ],
    [
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28,
        0xdf,
    ],
    [
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,
        0x16,
    ],
];

pub(crate) fn sub_word(word: u32) -> u32 {
    let mut result = 0;
    log::debug!("sub_word with word = 0x{:x}", word);
    for i in 0..4 {
        log::debug!("sub_word with i = {}", i);
        let byte = (word >> (8 * i)) as u8;
        log::debug!(
            "byte after bit_shift_right by {} bits: 0x{:x}",
            (8 * i),
            byte
        );
        let subbed = s_box_substitution(byte);
        log::debug!("byte after s_box_substitution: 0x{:x}", subbed);
        result |= (subbed as u32) << (8 * i);
        log::debug!(
            "result after bit_shift_right {} bits: 0x{:x}",
            (8 * i),
            result
        );
    }
    return result;
}

pub fn rot_word(word: u32) -> u32 {
    return (word << 8) | (word >> 24);
}

pub fn s_box_substitution(byte: u8) -> u8 {
    let row = (byte >> 4) as usize;
    let col = (byte & 0x0F) as usize;
    log::debug!(
        "s_box_sub: byte = 0x{:x}, row = 0x{:x}, col = 0x{:x}",
        byte,
        row,
        col
    );
    log::debug!("s_box[0x{:x}][0x{:x}] = 0x{:x}", row, col, S_BOX[row][col]);
    return S_BOX[row][col];
}

pub fn aes_key_schedule(key: &[u8; 16]) -> [u32; 44] {
    let mut w: [u32; 44] = [0; 44];

    for i in 0..4 {
        log::debug!("i = {}", i);
        w[i] = u32::from_be_bytes([key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]]);
    }

    for i in 4..44 {
        log::debug!("i = {}", i);
        let mut temp = w[i - 1];
        if i % 4 == 0 {
            temp = sub_word(rot_word(temp)) ^ (RCON[i / 4 - 1] as u32) << 24;
        }
        w[i] = w[i - 4] ^ temp;
        log::debug!("w[i] = {}", w[i]);
    }

    return w;
}

#[cfg(test)]
mod scheduler_test {
    use super::*;

    #[test]
    fn test_s_box_sub() {
        pretty_env_logger::try_init().ok();

        assert_eq!(s_box_substitution(0xdc), 0x86);
    }

    #[test]
    fn test_rot_word() {}

    #[test]
    fn test_sub_word() {
        pretty_env_logger::try_init().ok();

        assert_eq!(sub_word(0x2b7e1516), 0x63cab704);
    }

    // Use an example key with a known key expansion (previously computed with a reliable
    // implementation) to test for expansion correctness
    #[test]
    fn test_key_scheduler() {
        pretty_env_logger::try_init().ok();

        let key: [u8; 16] = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x89, 0x09, 0xcf,
            0x4f, 0x3c,
        ];
        let expanded_key = aes_key_schedule(&key);

        let expected_expansion: [u32; 44] = [
            0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c, 0xa0fafe17, 0x88542cb1, 0x23a33939,
            0x2a6c7605, 0xf2c295f2, 0x7a96b943, 0x5935807a, 0x7359f67f, 0x3d80477d, 0x4716fe3e,
            0x1e237e44, 0x6d7a883b, 0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00, 0xd4d1c6f8,
            0x7c839d87, 0xcaf2b8bc, 0x11f915bc, 0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd,
            0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f, 0xead27321, 0xb58dbad2, 0x312bf560,
            0x7f8d292f, 0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e, 0xd014f9a8, 0xc9ee2589,
            0xe13f0cc8, 0xb6630ca6,
        ];

        for i in 0..44 {
            log::debug!(
                "asserting byte {} of expanded_key matches byte {} of expected_expansion",
                i,
                i
            );
            assert_eq!(expanded_key[i], expected_expansion[i]);
        }
    }
}
